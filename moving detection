import cv2
import numpy as np
"""
Created on Thu Oct 25 23:55:25 2018

@author: Lenovo
"""
# 调用摄像头
#camera = cv2.VideoCapture(0)
camera = cv2.VideoCapture("W201.mp4")
#temp=cv2.QueryFrame(camera)
#fourcc = cv2.VideoWriter_fourcc(*'XVID')
#writer=cv2.VideoWriter("output.avi", fourcc, 20, (400,400))

(major_ver, minor_ver, subminor_ver) = (cv2.__version__).split('.')
print(major_ver+minor_ver+subminor_ver)

tracker_types = ['BOOSTING', 'MIL','KCF', 'TLD', 'MEDIANFLOW', 'GOTURN']
tracker_type = tracker_types[2]
if int(minor_ver) < 3:
    
    tracker = cv2.Tracker_create(tracker_type)
    tracker2 = cv2.Tracker_create(tracker_type)
    tracker3 = cv2.Tracker_create(tracker_type)
    
    
else:
    if tracker_type == 'BOOSTING':
        tracker = cv2.TrackerBoosting_create()
        tracker2 = cv2.TrackerBoosting_create()
        tracker3 = cv2.TrackerBoosting_create()
    if tracker_type == 'MIL':
        tracker = cv2.TrackerMIL_create()
        tracker2 = cv2.TrackerMIL_create()
        tracker3 = cv2.TrackerMIL_create()
    if tracker_type == 'KCF':
        tracker = cv2.TrackerKCF_create()
        tracker2 = cv2.TrackerKCF_create()
        tracker3 = cv2.TrackerKCF_create()
    if tracker_type == 'TLD':
        tracker = cv2.TrackerTLD_create()
        tracker2 = cv2.TrackerTLD_create()
        tracker3 = cv2.TrackerTLD_create()
    if tracker_type == 'MEDIANFLOW':
        tracker = cv2.TrackerMedianFlow_create()
        tracker2 = cv2.TrackerMedianFlow_create()
        tracker3 = cv2.TrackerMedianFlow_create()
    if tracker_type == 'GOTURN':
        tracker = cv2.TrackerGOTURN_create()
        tracker2 = cv2.TrackerGOTURN_create()
        tracker3 = cv2.TrackerGOTURN_create()
        
bbox = (287, 23, 86, 320)


kernel = np.ones((5, 5), np.uint8)
background = None
while True:
    # 读入摄像头的帧
    ret, frame = camera.read()
    # 把第一帧作为背景
    if background is None:
        background = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        background = cv2.GaussianBlur(background, (21, 21), 0)
        continue
    # 读入帧
    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    # 高斯平滑 模糊处理 减小光照 震动等原因产生的噪声影响
    gray_frame = cv2.GaussianBlur(gray_frame, (21, 21), 0)
    # 检测背景和帧的区别
    diff = cv2.absdiff(background, gray_frame)
    
    # 将区别转为二值
    diff = cv2.threshold(diff, 25, 255, cv2.THRESH_BINARY)[1]
    # 定义结构元素
    es = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (9, 4))
    # 膨胀运算
    diff = cv2.dilate(diff, es, iterations=2)
    # 搜索轮廓
    image, cnts, hierarcchy = cv2.findContours(diff.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    #每次都是以前一帧作为背景
    background=gray_frame
    
    for c in cnts:
        # 轮廓太小忽略 有可能是斑点噪声
        if cv2.contourArea(c) < 150:
            continue
        # 将轮廓画出来
        (x, y, w, h) = cv2.boundingRect(c)
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
    cv2.imshow("contours", frame)
    cv2.imshow("diff", diff)
    #writer.write(frame)
    cv2.waitKey(2)
    if cv2.waitKey(5) & 0xff == ord("q"):
        break
cv2.destroyAllWindows()
camera.release()
#writer.release()
